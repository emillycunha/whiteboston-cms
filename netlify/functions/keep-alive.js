import { schedule } from "@netlify/functions";
import { createClient } from "@supabase/supabase-js";

const supabaseUrl = process.env.NUXT_SUPABASE_URL;
const supabaseServiceRoleKey = process.env.NUXT_SERVICE_ROLE_KEY;
const discordWebhookUrl = process.env.DISCORD_WEBHOOK_URL;

console.log("üîÑ Starting keep-alive function...");
console.log("üîë Supabase URL:", supabaseUrl ? "‚úÖ Set" : "‚ùå MISSING");
console.log("üîë Service Role Key:", supabaseServiceRoleKey ? "‚úÖ Set" : "‚ùå MISSING");
console.log("üîî Discord Webhook:", discordWebhookUrl ? "‚úÖ Set" : "‚ùå MISSING");

const supabase = createClient(supabaseUrl, supabaseServiceRoleKey);

// ‚úÖ Rename the function to avoid redeclaration issues
const keepAliveFunction = async function () {
  console.log("üîÑ Running weekly keep-alive function...");

  try {
    console.log(`üîë Supabase URL: ${supabaseUrl ? "‚úÖ Set" : "‚ùå Not Set"}`);
    console.log(`üîë Service Role Key: ${supabaseServiceRoleKey ? "‚úÖ Set" : "‚ùå Not Set"}`);

    // ‚úÖ Perform a simple query to check if Supabase is alive
    const { data, error } = await supabase.from("users").select("id").limit(1);

    if (error) {
      console.error("‚ùå Supabase Query Error:", error);
      await sendDiscordNotification(`‚ùå **Supabase Error:** ${error.message}`);
      return { statusCode: 500, body: JSON.stringify({ error: "Failed to keep Supabase active.", details: error }) };
    }

    console.log("‚úÖ Supabase is active!", data);
    await sendDiscordNotification("‚úÖ **Supabase Keep-Alive Check Passed!** Supabase is active.");

    return { statusCode: 200, body: JSON.stringify({ message: "Keep-alive check completed." }) };
  } catch (err) {
    console.error("‚ùå Unexpected Error:", err);
    await sendDiscordNotification(`‚ùå **Unexpected Error:** ${err.message}`);
    return {
      statusCode: 500,
      body: JSON.stringify({ error: "Unexpected error occurred.", details: err.message }),
    };
  }
};

// ‚úÖ Function to send a message to Discord
const sendDiscordNotification = async (message) => {
  if (!discordWebhookUrl) {
    console.warn("‚ö†Ô∏è Discord Webhook URL is missing. Skipping notification.");
    return;
  }

  try {
    await fetch(discordWebhookUrl, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ content: message }),
    });
    console.log("‚úÖ Discord notification sent!");
  } catch (error) {
    console.error("‚ùå Failed to send Discord notification:", error);
  }
};

// ‚úÖ Export the scheduled function correctly
export const handler = schedule("@daily", keepAliveFunction);
